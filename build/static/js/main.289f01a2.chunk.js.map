{"version":3,"sources":["components/Buttons/TransToMain.jsx","redux/user.js","pages/LoginPage/LoginPage.jsx","pages/IdPassPage/FindIdPage.jsx","pages/IdPassPage/FindPassPage.jsx","components/Buttons/MainToTrans.jsx","pages/MainPage/Title.jsx","pages/MainPage/VideoBtn.jsx","pages/MainPage/MainPage.jsx","components/chat/ChatComponent.js","components/stream/OvVideo.js","components/stream/StreamComponent.js","layout/openvidu-layout.js","models/user-model.js","components/toolbar/ToolbarComponent.js","pages/WaitTemporary/WaitTemporary.js","pages/ErrorPage/OvercrowdingPage.js","components/VideoRoomComponentFunction/VideoRoomComponentFunction.js","components/VideoRoomComponent.js","pages/AITranslate/SpeechRecognitor.js","pages/AITranslate/AITranslate.js","pages/Profile.jsx","App.js","redux/store.js","index.js","pages/AITranslate/AITranslate.module.css"],"names":["MainToTransBtn","props","className","to","onSubmit","e","preventDefault","initialStateValue","userId","userPass","userName","userEmail","userIsActive","userSlice","createSlice","name","initialState","value","reducers","login","state","action","payload","logout","actions","LoginPage","navigate","useNavigate","useState","id","setId","pass","setPass","dispatch","useDispatch","userid","useRef","userpassword","handleSubmit","a","console","log","axios","post","JSON","stringify","current","headers","withCredentials","response","username","data","useremail","email","userisactive","is_active","TransToMain","htmlFor","ref","onChange","target","type","placeholder","FindIdPage","setName","setEmail","onClick","onFormSwitch","Title","MainToTrans","VideoBtn","restartOnPaused","videoSrc","src","test","MainPage","ChatComponent","messageList","message","chatScroll","React","createRef","handleChange","bind","handlePressKey","close","sendMessage","this","user","getStreamManager","stream","session","on","event","parse","push","connectionId","from","nickname","document","window","setTimeout","userImg","getElementById","length","video","streamId","getContext","drawImage","messageReceived","setState","scrollToBottom","key","replace","getNickname","signal","scrollTop","scrollHeight","err","undefined","styleChat","display","chatDisplay","style","sessionId","IconButton","color","map","i","getConnectionId","width","height","onKeyPress","Tooltip","title","Fab","size","Component","OvVideoComponent","videoRef","streamManager","addVideoElement","isScreenShareActive","autoPlay","muted","mutedSound","StreamComponent","showForm","isFormValid","toggleNicknameForm","toggleSound","isLocal","handleNickname","camWidth","FormControl","InputLabel","Input","required","FormHelperText","isVideoActive","isAudioActive","OpenViduLayout","elem","sub","querySelector","oldWidth","x","y","animate","targetPosition","left","top","fixAspectRatio","$","stop","duration","easing","complete","call","css","videoHeight","videoWidth","prop","cssStr","parseInt","Math","random","toFixed","heightStr","widthStr","minR","maxR","count","WIDTH","HEIGHT","targetHeight","maxArea","targetCols","targetRows","targetWidth","tWidth","tHeight","tRatio","colsAux","rowsAux","ceil","floor","area","ratio","children","offsetLeft","offsetTop","fixedRatio","minRatio","maxRatio","dimensions","getVideoRatio","getBestDimensions","row","rows","totalRowHeight","remainingShortRows","remainingHeightDiff","extraHeight","j","position","actualWidth","getCSSNumber","actualHeight","positionElement","element","layoutContainer","cheapUUID","bigWidth","bigHeight","getHeight","getWidth","availableRatio","bigOffsetTop","bigOffsetLeft","bigOnes","Array","prototype","filter","querySelectorAll","opts","bigClass","filterDisplayNone","smallOnes","bigPercentage","bigFirst","arrange","bigFixedRatio","bigMinRatio","bigMaxRatio","container","options","UserModel","audioActive","videoActive","screenShareActive","conecctionId","ToolbarComponent","fullscreen","camStatusChanged","micStatusChanged","toggleFullscreen","switchCamera","leaveSession","toggleChat","mySessionId","localUser","AppBar","Toolbar","showNotification","WaitTemporary","OvercrowdingPage","VideoRoomComponent","hasBeenUpdated","layout","sessionName","remotes","localUserAccessAllowed","myUserName","subscribers","currentVideoDevice","relode","joinSession","onbeforeunload","updateLayout","nicknameChanged","closeDialogExtension","checkNotification","checkSize","initLayoutContainer","addEventListener","removeEventListener","OV","OpenVidu","initSession","subscribeToStreamCreated","connectToSession","token","connect","getToken","error","code","messgae","status","alert","clientData","then","connectWebCam","catch","getUserMedia","audioSource","videoSource","getDevices","devices","videoDevices","device","kind","publisher","initPublisher","deviceId","publishAudio","publishVideo","resolution","frameRate","insertMode","capabilities","publish","updateSubscribers","setNickname","setConnectionId","connection","setStreamManager","subscribeToUserChanged","subscribeToStreamDestroyed","videos","parentElement","classList","remove","sendSignalUserChanged","mySession","disconnect","setVideoActive","setAudioActive","remoteUsers","userStream","index","indexOf","splice","subscriber","subscribe","newUser","setType","split","deleteSubscriber","forEach","signalOptions","fs","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","newVideoDevice","newPublisher","mirror","unpublish","showExtensionDialog","property","offsetWidth","now","createSession","createToken","customSessionId","SpeechRecognitor","useSpeechRecognition","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","useEffect","get","BASE_URL","onSpeech","trimEnd","speechToSignLang","SpeechRecognition","startListening","stopListening","BASE_VIDEO_URL","AITranslate","detectionInterval","initedCanvas","jb","str","flag","animationVideo","socket","canvas","context","prevStr","_count","interval","faceBoxes","countWord","urls","setCount","notifyMessage","setNotifyMessage","vidoeSrc","setVideoSrc","setUiSize","videoOffsetWidth","boxes","outerBoxWidth","outerBoxLeft","substring","browserResizeHandler","displaySize","offsetHeight","startDetect","faceapi","withFaceLandmarks","withFaceDescriptors","detections","resizedDetections","clearRect","detection","box","DrawBox","label","draw","clearInterval","translate","manageDetection","io","cors","origin","connected","Promise","all","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","ssdMobilenetv1","navigator","mediaDevices","srcObject","play","startVideo","setInterval","startTranslate","image","resizeImage","emit","sendWebCamImage","resizeCanvas","createElement","toDataURL","Fragment","charSet","styles","ex_layout","words","shift","playing","playsInline","controls","onEnded","url","outline","el","inner","defaultValue","Profile","useSelector","App","path","FindPassPage","exact","combineReducers","reducer","persistConfig","storage","whitelist","persistedReducer","persistReducer","store","configureStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","module","exports"],"mappings":"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","file":"static/js/main.289f01a2.chunk.js","sourcesContent":["import React from \"react\";\nimport './Buttons.css';\nimport { Link } from \"react-router-dom\";\n\nfunction MainToTransBtn(props) {\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    return (\n        <div className=\"trans-box\">\n            <Link to=\"/\">\n                <form onSubmit={handleSubmit}>\n                    <button className=\"main-btn\">\n                        Main\n                    </button>\n                </form>\n            </Link>\n        </div>\n    )\n}\n\nexport default MainToTransBtn;","// 3. createSlice : createReducer + createAction\n// name: 리듀서 이름\n// initialState: 데이터 초기값\n// reducers: 상태가 변하면 실행되는 로직 부분\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialStateValue = {\n    userId: \"\",\n    userPass: \"\",\n    userName: \"\",\n    userEmail: \"\",\n    userIsActive: false\n}\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState: { value: initialStateValue},\n    reducers: {\n        login: (state, action) => {\n            state.value = action.payload\n        },\n        logout: (state) => {\n            state.value = initialStateValue\n        }\n    },\n});\n\n// 4. login 함수 정의\nexport const { login, logout } = userSlice.actions;\n\nexport default userSlice.reducer;","import React, { useState, useRef } from 'react';\nimport TransToMainBtn from '../../components/Buttons/TransToMain'\nimport './LoginPage.css'\nimport { Link } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\n// 8. useDispatch 훅 사용\nimport { useDispatch } from 'react-redux';\nimport { login } from '../../redux/user';\nimport axios from 'axios';\n\nfunction LoginPage(props) {\n    // link 대신 navigate 사용하기\n    const navigate = useNavigate();\n\n    // id, pass 입력을 받는 변수\n    const [id, setId] = useState('');\n    const [pass, setPass] = useState('');\n\n    // 9. action을 보낼 수 있도록 dispatch 함수정의\n    const dispatch = useDispatch();\n\n    // axios 요청으로 회원의 id, pass를 받을 변수\n    const userid = useRef();\n    const userpassword = useRef(); \n\n\n    // login을 위한 axios 요청\n    const handleSubmit = async (e) => {\n        console.log('axios 요청보내기')\n        e.preventDefault();\n        try {\n          const response = await axios.post(\"http://localhost:8090/api/v1/users/login\",\n            JSON.stringify({'userName': userid.current.value, 'password': userpassword.current.value}),\n            {\n              headers: {\n                'header1':'header1',\n                'Content-Type': 'application/json',\n              },\n              withCredentials: false\n            }\n          );\n            console.log(response)\n            // reponse 응답으로 받은 유저의 정보 저장\n            const username = response.data.name\n            const useremail = response.data.email\n            const userisactive = response.data.is_active\n            console.log(username)\n\n            // 10. value 값을 넣어 함수호출\n            dispatch(login({userId: {id}, userPass: {pass}, userName: {username}, userEmail: {useremail}, userIsActive: {userisactive}}));\n\n\n            // 로그인 성공 후 profile로 이동\n            navigate(\"/profile\");\n        } catch (err) {\n          console.log(err)\n            // 에러 나면 로그인 창 새로고침 돼야함..\n            navigate(\"/login\")\n        }\n      };    \n\n    return (\n        <div className='bg'>\n            <div className='login-top-items'>\n                <TransToMainBtn></TransToMainBtn>\n            </div>\n            <div className='login-bg'>\n                <div className='login-form-container'>\n                <div className=\"login-title\">수어가중계</div>\n                    <form className='login-form' onSubmit={handleSubmit}>\n                        <label htmlFor=\"id\">아이디</label>\n                        <input ref={userid} className='login-input-item' value={id} onChange={(e) => setId(e.target.value)} type=\"text\" placeholder='아이디를 입력해주세요' />\n                \n                        <label htmlFor=\"password\">비밀번호</label>\n                        <input ref={userpassword} className='login-input-item' value={pass} onChange={(e) => setPass(e.target.value)} type=\"password\" placeholder='비밀번호를 입력해주세요' />\n\n                        <button className='login-btn' type='submit'>로그인</button>\n                    </form>\n                    <Link to=\"/FindId\">\n                        <button className='movePage'>아이디/비밀번호 찾기</button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n        \n\n      );\n}\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport TransToMainBtn from '../../components/Buttons/TransToMain'\nimport './IdPassPage.css'\nimport { Link } from 'react-router-dom';\n\nfunction FindIdPage(props) {\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(name);\n    }\n\n\n    return (\n        <div className='bg'>\n            <div className='btn-bg'>\n            <TransToMainBtn></TransToMainBtn>\n            </div>\n            <div className='id-bg'>\n                <div className='id-form-container'>\n                <div className=\"id-title\">아이디 º 비밀번호 찾기</div>\n                    <div>\n                        <Link to=\"/findId\">\n                            <button onClick={() => props.onFormSwitch('id')} className='find-id-btn'>아이디 찾기</button>\n                        </Link>\n                        <Link to=\"/findPass\">\n                            <button onClick={() => props.onFormSwitch('pass')} className='find-pass-btn'>비밀번호 찾기</button>\n                        </Link>\n                    </div>\n                    <form className='id-form' onSubmit={handleSubmit}>\n                        <label htmlFor=\"id\">아이디찾기</label>\n                        <input className='find-input' value={name} onChange={(e) => setName(e.target.value)} type=\"text\" placeholder='이름' />\n                        <br />\n                        <input className='find-input' value={email} onChange={(e) => setEmail(e.target.value)} type=\"text\" placeholder='계정' />\n                               \n                        <button className='check-btn' type='submit'>확인</button>\n\n                    </form>\n                    <button onClick={() => props.onFormSwitch('login')} className='movePage'>로그인 하기</button>\n                </div>\n            </div>\n        </div>\n        \n\n      );\n}\n\nexport default FindIdPage;","import React, { useState } from 'react';\nimport TransToMainBtn from '../../components/Buttons/TransToMain'\nimport './IdPassPage.css'\nimport { Link } from 'react-router-dom';\n\nfunction FindIdPage(props) {\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(name);\n    }\n\n\n    return (\n        <div className='bg'>\n            <div className='btn-bg'>\n            <TransToMainBtn></TransToMainBtn>\n            </div>\n            <div className='pass-bg'>\n                <div className='pass-form-container'>\n                <div className=\"pass-title\">아이디 º 비밀번호 찾기</div>\n                    <div>\n                        <Link to=\"/findId\">\n                            <button onClick={() => props.onFormSwitch('id')} className='find-id-btn'>아이디 찾기</button>\n                        </Link>\n                        <Link to=\"/findPass\">\n                            <button onClick={() => props.onFormSwitch('pass')} className='find-pass-btn'>비밀번호 찾기</button>\n                        </Link>\n                    </div>\n                    <form className='pass-form' onSubmit={handleSubmit}>\n                        <label htmlFor=\"pass\">비밀번호 찾기</label>\n                        <input className='find-input' value={name} onChange={(e) => setName(e.target.value)} type=\"text\" placeholder='이름' />\n                        <br />\n                        <input className='find-input' value={email} onChange={(e) => setEmail(e.target.value)} type=\"text\" placeholder='아이디' />\n                               \n                        <button className='check-btn' type='submit'>확인</button>\n\n                    </form>\n                    <Link to=\"/login\">\n                        <button className='movePage'>로그인 하기</button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n        \n\n      );\n}\n\nexport default FindIdPage;","import React from \"react\";\nimport './Buttons.css';\nimport { Link } from 'react-router-dom';\n\nfunction MainToTransBtn(props) {\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    return (\n        <div className=\"trans-box\">\n            <Link to=\"/login\">\n                <form onSubmit={handleSubmit}>\n                    <button className=\"trans-btn\">\n                        통역사\n                    </button>\n                </form>\n            </Link>\n        </div>\n    )\n}\n\nexport default MainToTransBtn;","import React from \"react\";\nimport './Main.css';\nimport MainToTransBtn from '../../components/Buttons/MainToTrans'\n\nfunction Title(props) {\n    return (\n        <div className=\"title-box\">\n            <MainToTransBtn></MainToTransBtn>\n            <div className=\"title-header\">수어가중계</div>\n        </div>\n    );\n}\n\nexport default Title;","import React from \"react\";\nimport './Main.css';\n// Hovering 라이브러리 필요\n// npm install react-hover-video-player\nimport HoverVideoPlayer from 'react-hover-video-player';\nimport { Link } from \"react-router-dom\";\n\nfunction VideoBtn(props) {\n    return (\n        <div className=\"wrapper\">\n            <div className=\"video-box\">\n                <div className=\"video\">\n                <HoverVideoPlayer\n                        restartOnPaused\n                        videoSrc={[\n                            { src: '/VideoSrc/v1.webm', type: 'video/webm' },\n                            { src: 'video.mp4', type: 'video/mp4' },\n                        ]}>\n                    </HoverVideoPlayer>\n                    {/* <Link to=\"/temporary\" state={{test:false}}>\n                        <button className='matching-btn' type='submit'>통역사매칭서비스</button>\n                    </Link> */}\n                    <Link to=\"/cam\" state={{test:false}}>\n                        <button className='matching-btn' type='submit'>통역사매칭서비스</button>\n                    </Link>\n                </div>\n\n                <div className=\"video\">\n                <HoverVideoPlayer\n                        restartOnPaused\n                        videoSrc={[\n                            { src: '/VideoSrc/v2.webm', type: 'video/webm' },\n                            { src: 'video.mp4', type: 'video/mp4' },\n                        ]}>\n                    </HoverVideoPlayer>\n                    {/* <form onSubmit={handleSubmit}> */}\n                    <Link to=\"/aiTranslate\">\n                        <button className=\"matching-btn\" type=\"submit\">AI통역서비스</button>\n                    </Link>\n                    {/* </form> */}\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default VideoBtn;","import React from \"react\";\nimport Title from \"./Title\";\nimport VideoBtn from \"./VideoBtn\";\n\nfunction MainPage(props) {\n    return (\n        <div>\n            <Title></Title>\n            <VideoBtn></VideoBtn>\n        </div>\n    )\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Fab from '@material-ui/core/Fab';\nimport HighlightOff from '@material-ui/icons/HighlightOff';\nimport Send from '@material-ui/icons/Send';\n\nimport './ChatComponent.css';\nimport { Tooltip } from '@material-ui/core';\n\nexport default class ChatComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            messageList: [],\n            message: '',\n        };\n        this.chatScroll = React.createRef();\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePressKey = this.handlePressKey.bind(this);\n        this.close = this.close.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n    }\n\n\n    componentDidMount() {\n        this.props.user.getStreamManager().stream.session.on('signal:chat', (event) => {\n            const data = JSON.parse(event.data);\n            let messageList = this.state.messageList;\n            messageList.push({ connectionId: event.from.connectionId, nickname: data.nickname, message: data.message });\n            const document = window.document;\n            setTimeout(() => {\n                const userImg = document.getElementById('userImg-' + (this.state.messageList.length - 1));\n                const video = document.getElementById('video-' + data.streamId);\n                const avatar = userImg.getContext('2d');\n                avatar.drawImage(video, 200, 120, 285, 285, 0, 0, 60, 60);\n                this.props.messageReceived();\n            }, 50);\n            this.setState({ messageList: messageList });\n            this.scrollToBottom();\n        });\n    }\n\n    handleChange(event) {\n        this.setState({ message: event.target.value });\n    }\n\n    handlePressKey(event) {\n        if (event.key === 'Enter') {\n            this.sendMessage();\n        }\n    }\n\n    sendMessage() {\n        console.log(this.state.message);\n        if (this.props.user && this.state.message) {\n            let message = this.state.message.replace(/ +(?= )/g, '');\n            if (message !== '' && message !== ' ') {\n                const data = { message: message, nickname: this.props.user.getNickname(), streamId: this.props.user.getStreamManager().stream.streamId };\n                this.props.user.getStreamManager().stream.session.signal({\n                    data: JSON.stringify(data),\n                    type: 'chat',\n                });\n            }\n        }\n        this.setState({ message: '' });\n    }\n\n    scrollToBottom() {\n        setTimeout(() => {\n            try {\n                this.chatScroll.current.scrollTop = this.chatScroll.current.scrollHeight;\n            } catch (err) {}\n        }, 20);\n    }\n\n    close() {\n        this.props.close(undefined);\n    }\n\n    render() {\n        const styleChat = { display: this.props.chatDisplay };\n        return (\n            <div id=\"chatContainer\">\n                <div id=\"chatComponent\" style={styleChat}>\n                    <div id=\"chatToolbar\">\n                        <span>{this.props.user.getStreamManager().stream.session.sessionId} - CHAT</span>\n                        <IconButton id=\"closeButton\" onClick={this.close}>\n                            <HighlightOff color=\"secondary\" />\n                        </IconButton>\n                    </div>\n                    <div className=\"message-wrap\" ref={this.chatScroll}>\n                        {this.state.messageList.map((data, i) => (\n                            <div\n                                key={i}\n                                id=\"remoteUsers\"\n                                className={\n                                    'message' + (data.connectionId !== this.props.user.getConnectionId() ? ' left' : ' right')\n                                }\n                            >\n                                <canvas id={'userImg-' + i} width=\"60\" height=\"60\" className=\"user-img\" />\n                                <div className=\"msg-detail\">\n                                    <div className=\"msg-info\">\n                                        <p> {data.nickname}</p>\n                                    </div>\n                                    <div className=\"msg-content\">\n                                        <span className=\"triangle\" />\n                                        <p className=\"text\">{data.message}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n\n                    <div id=\"messageInput\">\n                        <input\n                            placeholder=\"Send a messge\"\n                            id=\"chatInput\"\n                            value={this.state.message}\n                            onChange={this.handleChange}\n                            onKeyPress={this.handlePressKey}\n                        />\n                        <Tooltip title=\"Send message\">\n                            <Fab size=\"small\" id=\"sendButton\" onClick={this.sendMessage}>\n                                <Send />\n                            </Fab>\n                        </Tooltip>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './StreamComponent.css';\n\nexport default class OvVideoComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props && this.props.user.streamManager && !!this.videoRef) {\n            console.log('PROPS: ', this.props);\n            this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n        }\n\n        if (this.props && this.props.user.streamManager.session && this.props.user && !!this.videoRef) {\n            this.props.user.streamManager.session.on('signal:userChanged', (event) => {\n                const data = JSON.parse(event.data);\n                if (data.isScreenShareActive !== undefined) {\n                    this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n                }\n            });\n        }\n    }\n\n    componentDidUpdate(props) {\n        if (props && !!this.videoRef) {\n            this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n        }\n    }\n\n    render() {\n        return (\n            <video\n                autoPlay={true}\n                id={'video-' + this.props.user.getStreamManager().stream.streamId}\n                ref={this.videoRef}\n                muted={this.props.mutedSound}\n            />\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './StreamComponent.css';\nimport OvVideoComponent from './OvVideo';\n\nimport MicOff from '@material-ui/icons/MicOff';\nimport VideocamOff from '@material-ui/icons/VideocamOff';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport VolumeOff from '@material-ui/icons/VolumeOff';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport HighlightOff from '@material-ui/icons/HighlightOff';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nexport default class StreamComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { nickname: this.props.user.getNickname(), showForm: false, mutedSound: false, isFormValid: true };\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePressKey = this.handlePressKey.bind(this);\n        this.toggleNicknameForm = this.toggleNicknameForm.bind(this);\n        this.toggleSound = this.toggleSound.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ nickname: event.target.value });\n        event.preventDefault();\n    }\n\n    toggleNicknameForm() {\n        if (this.props.user.isLocal()) {\n            this.setState({ showForm: !this.state.showForm });\n        }\n    }\n\n    toggleSound() {\n        this.setState({ mutedSound: !this.state.mutedSound });\n    }\n\n    handlePressKey(event) {\n        if (event.key === 'Enter') {\n            console.log(this.state.nickname);\n            if (this.state.nickname.length >= 3 && this.state.nickname.length <= 20) {\n                this.props.handleNickname(this.state.nickname);\n                this.toggleNicknameForm();\n                this.setState({ isFormValid: true });\n            } else {\n                this.setState({ isFormValid: false });\n            }\n        }\n    }\n\n    render() {\n        const width = {width:this.props.camWidth};\n        return (\n            <div className=\"OT_widget-container\" style={width}>\n                <div className=\"pointer nickname\">\n                    {this.state.showForm ? (\n                        <FormControl id=\"nicknameForm\">\n                            <IconButton color=\"inherit\" id=\"closeButton\" onClick={this.toggleNicknameForm}>\n                                <HighlightOff />\n                            </IconButton>\n                            <InputLabel htmlFor=\"name-simple\" id=\"label\">\n                                Nickname\n                            </InputLabel>\n                            <Input\n                                color=\"inherit\"\n                                id=\"input\"\n                                value={this.state.nickname}\n                                onChange={this.handleChange}\n                                onKeyPress={this.handlePressKey}\n                                required\n                            />\n                            {!this.state.isFormValid && this.state.nickname.length <= 3 && (\n                                <FormHelperText id=\"name-error-text\">Nickname is too short!</FormHelperText>\n                            )}\n                            {!this.state.isFormValid && this.state.nickname.length >= 20 && (\n                                <FormHelperText id=\"name-error-text\">Nickname is too long!</FormHelperText>\n                            )}\n                        </FormControl>\n                    ) : (\n                        <div onClick={this.toggleNicknameForm}>\n                            <span id=\"nickname\">{this.props.user.getNickname()}</span>\n                            {this.props.user.isLocal() && <span id=\"\"> (edit)</span>}\n                        </div>\n                    )}\n                </div>\n\n                {this.props.user !== undefined && this.props.user.getStreamManager() !== undefined ? (\n                    <div className=\"streamComponent\">\n                        <OvVideoComponent user={this.props.user} mutedSound={this.state.mutedSound} />\n                        <div id=\"statusIcons\">\n                            {!this.props.user.isVideoActive() ? (\n                                <div id=\"camIcon\">\n                                    <VideocamOff id=\"statusCam\" />\n                                </div>\n                            ) : null}\n\n                            {!this.props.user.isAudioActive() ? (\n                                <div id=\"micIcon\">\n                                    <MicOff id=\"statusMic\" />\n                                </div>\n                            ) : null}\n                        </div>\n                        <div>\n                            {!this.props.user.isLocal() && (\n                                <IconButton id=\"volumeButton\" onClick={this.toggleSound}>\n                                    {this.state.mutedSound ? <VolumeOff color=\"secondary\" /> : <VolumeUp />}\n                                </IconButton>\n                            )}\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n","import $ from 'jquery';\n\nclass OpenViduLayout {\n  layoutContainer;\n  opts ;\n\n  fixAspectRatio(elem, width) {\n    const sub = elem.querySelector('.OT_root');\n    if (sub) {\n      // If this is the parent of a subscriber or publisher then we need\n      // to force the mutation observer on the publisher or subscriber to\n      // trigger to get it to fix it's layout\n      const oldWidth = sub.style.width;\n      sub.style.width = width + 'px';\n      // sub.style.height = height + 'px';\n      sub.style.width = oldWidth || '';\n    }\n  }\n\n positionElement(elem, x, y, width, height, animate) {\n    const targetPosition = {\n      left: x + 'px',\n      top: y + 'px',\n      width: width + 'px',\n      height: height + 'px',\n    };\n\n    this.fixAspectRatio(elem, width);\n\n    if (animate && $) {\n      $(elem).stop();\n      $(elem).animate(targetPosition, animate.duration || 200, animate.easing || 'swing', () => {\n        this.fixAspectRatio(elem, width);\n        if (animate.complete) {\n          animate.complete.call(this);\n        }\n      });\n    } else {\n      $(elem).css(targetPosition);\n    }\n    this.fixAspectRatio(elem, width);\n  }\n\n  getVideoRatio(elem) {\n    if (!elem) {\n      return 3 / 4;\n    }\n    const video = elem.querySelector('video');\n    if (video && video.videoHeight && video.videoWidth) {\n      return video.videoHeight / video.videoWidth;\n    } else if (elem.videoHeight && elem.videoWidth) {\n      return elem.videoHeight / elem.videoWidth;\n    }\n    return 3 / 4;\n  }\n\n   getCSSNumber(elem, prop) {\n    const cssStr = $(elem).css(prop);\n    return cssStr ? parseInt(cssStr, 10) : 0;\n  }\n\n  // Really cheap UUID function\n   cheapUUID() {\n    return (Math.random() * 100000000).toFixed(0);\n  }\n\n   getHeight(elem) {\n    const heightStr = $(elem).css('height');\n    return heightStr ? parseInt(heightStr, 10) : 0;\n  }\n\n   getWidth(elem) {\n    const widthStr = $(elem).css('width');\n    return widthStr ? parseInt(widthStr, 10) : 0;\n  }\n\n   getBestDimensions(minR , maxR , count , WIDTH, HEIGHT, targetHeight) {\n    let maxArea, targetCols, targetRows, targetWidth, tWidth, tHeight, tRatio;\n\n    // Iterate through every possible combination of rows and columns\n    // and see which one has the least amount of whitespace\n    for (let i = 1; i <= count; i++) {\n      const colsAux = i;\n      const rowsAux = Math.ceil(count / colsAux);\n\n      // Try taking up the whole height and width\n      tHeight = Math.floor(HEIGHT / rowsAux);\n      tWidth = Math.floor(WIDTH / colsAux);\n\n      tRatio = tHeight / tWidth;\n      if (tRatio > maxR) {\n        // We went over decrease the height\n        tRatio = maxR;\n        tHeight = tWidth * tRatio;\n      } else if (tRatio < minR) {\n        // We went under decrease the width\n        tRatio = minR;\n        tWidth = tHeight / tRatio;\n      }\n\n      const area = tWidth * tHeight * count;\n\n      // If this width and height takes up the most space then we're going with that\n      if (maxArea === undefined || area > maxArea) {\n        maxArea = area;\n        targetHeight = tHeight;\n        targetWidth = tWidth;\n        targetCols = colsAux;\n        targetRows = rowsAux;\n      }\n    }\n    return {\n      maxArea: maxArea,\n      targetCols: targetCols,\n      targetRows: targetRows,\n      targetHeight: targetHeight,\n      targetWidth: targetWidth,\n      ratio: targetHeight / targetWidth,\n    };\n  }\n\n   arrange(\n    children,\n    WIDTH,\n    HEIGHT,\n    offsetLeft,\n    offsetTop,\n    fixedRatio,\n    minRatio,\n    maxRatio,\n    animate,\n  ) {\n    let targetHeight;\n\n    const count = children.length;\n    let dimensions;\n\n    if (!fixedRatio) {\n      dimensions = this.getBestDimensions(minRatio, maxRatio, count, WIDTH, HEIGHT, targetHeight);\n    } else {\n      // Use the ratio of the first video element we find to approximate\n      const ratio = this.getVideoRatio(children.length > 0 ? children[0] : null);\n      dimensions = this.getBestDimensions(ratio, ratio, count, WIDTH, HEIGHT, targetHeight);\n    }\n\n    // Loop through each stream in the container and place it inside\n    let x = 0,\n      y = 0;\n    const rows = [];\n    let row;\n    // Iterate through the children and create an array with a new item for each row\n    // and calculate the width of each row so that we know if we go over the size and need\n    // to adjust\n    for (let i = 0; i < children.length; i++) {\n      if (i % dimensions.targetCols === 0) {\n        // This is a new row\n        row = {\n          children: [],\n          width: 0,\n          height: 0,\n        };\n        rows.push(row);\n      }\n      const elem = children[i];\n      row.children.push(elem);\n      let targetWidth = dimensions.targetWidth;\n      targetHeight = dimensions.targetHeight;\n      // If we're using a fixedRatio then we need to set the correct ratio for this element\n      if (fixedRatio) {\n        targetWidth = targetHeight / this.getVideoRatio(elem);\n      }\n      row.width += targetWidth;\n      row.height = targetHeight;\n    }\n    // Calculate total row height adjusting if we go too wide\n    let totalRowHeight = 0;\n    let remainingShortRows = 0;\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      if (row.width > WIDTH) {\n        // Went over on the width, need to adjust the height proportionally\n        row.height = Math.floor(row.height * (WIDTH / row.width));\n        row.width = WIDTH;\n      } else if (row.width < WIDTH) {\n        remainingShortRows += 1;\n      }\n      totalRowHeight += row.height;\n    }\n    if (totalRowHeight < HEIGHT && remainingShortRows > 0) {\n      // We can grow some of the rows, we're not taking up the whole height\n      let remainingHeightDiff = HEIGHT - totalRowHeight;\n      totalRowHeight = 0;\n      for (let i = 0; i < rows.length; i++) {\n        row = rows[i];\n        if (row.width < WIDTH) {\n          // Evenly distribute the extra height between the short rows\n          let extraHeight = remainingHeightDiff / remainingShortRows;\n          if (extraHeight / row.height > (WIDTH - row.width) / row.width) {\n            // We can't go that big or we'll go too wide\n            extraHeight = Math.floor((WIDTH - row.width) / row.width * row.height);\n          }\n          row.width += Math.floor(extraHeight / row.height * row.width);\n          row.height += extraHeight;\n          remainingHeightDiff -= extraHeight;\n          remainingShortRows -= 1;\n        }\n        totalRowHeight += row.height;\n      }\n    }\n    // vertical centering\n    y = (HEIGHT - totalRowHeight) / 2;\n    // Iterate through each row and place each child\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      // center the row\n      const rowMarginLeft = (WIDTH - row.width) / 2;\n      x = rowMarginLeft;\n      for (let j = 0; j < row.children.length; j++) {\n        const elem = row.children[j];\n\n        let targetWidth = dimensions.targetWidth;\n        targetHeight = row.height;\n        // If we're using a fixedRatio then we need to set the correct ratio for this element\n        if (fixedRatio) {\n          targetWidth = Math.floor(targetHeight / this.getVideoRatio(elem));\n        }\n        elem.style.position = 'absolute';\n        // $(elem).css('position', 'absolute');\n        const actualWidth =\n          targetWidth -\n          this.getCSSNumber(elem, 'paddingLeft') -\n          this.getCSSNumber(elem, 'paddingRight') -\n          this.getCSSNumber(elem, 'marginLeft') -\n          this.getCSSNumber(elem, 'marginRight') -\n          this.getCSSNumber(elem, 'borderLeft') -\n          this.getCSSNumber(elem, 'borderRight');\n\n        const actualHeight =\n          targetHeight -\n          this.getCSSNumber(elem, 'paddingTop') -\n          this.getCSSNumber(elem, 'paddingBottom') -\n          this.getCSSNumber(elem, 'marginTop') -\n          this.getCSSNumber(elem, 'marginBottom') -\n          this.getCSSNumber(elem, 'borderTop') -\n          this.getCSSNumber(elem, 'borderBottom');\n\n        this.positionElement(elem, x + offsetLeft, y + offsetTop, actualWidth, actualHeight, animate);\n        x += targetWidth;\n      }\n      y += targetHeight;\n    }\n  }\n\n filterDisplayNone(element) {\n    return element.style.display !== 'none';\n  }\n\n  updateLayout() {\n    if (this.layoutContainer===null || this.layoutContainer.style.display === 'none') {\n      return;\n    }\n    let id = this.layoutContainer.id;\n    if (!id) {\n      id = 'OT_' + this.cheapUUID();\n      this.layoutContainer.id = id;\n    }\n\n    const HEIGHT =\n      this.getHeight(this.layoutContainer) -\n      this.getCSSNumber(this.layoutContainer, 'borderTop') -\n      this.getCSSNumber(this.layoutContainer, 'borderBottom');\n    const WIDTH =\n      this.getWidth(this.layoutContainer) -\n      this.getCSSNumber(this.layoutContainer, 'borderLeft') -\n      this.getCSSNumber(this.layoutContainer, 'borderRight');\n\n    const availableRatio = HEIGHT / WIDTH;\n\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    let bigOffsetTop = 0;\n    let bigOffsetLeft = 0;\n\n    const bigOnes = Array.prototype.filter.call(\n      this.layoutContainer.querySelectorAll('#' + id + '>.' + this.opts.bigClass),\n      this.filterDisplayNone,\n    );\n    const smallOnes = Array.prototype.filter.call(\n      this.layoutContainer.querySelectorAll('#' + id + '>*:not(.' + this.opts.bigClass + ')'),\n      this.filterDisplayNone,\n    );\n\n    if (bigOnes.length > 0 && smallOnes.length > 0) {\n      let bigWidth, bigHeight;\n\n      if (availableRatio > this.getVideoRatio(bigOnes[0])) {\n        // We are tall, going to take up the whole width and arrange small\n        // guys at the bottom\n        bigWidth = WIDTH;\n        bigHeight = Math.floor(HEIGHT * this.opts.bigPercentage);\n        offsetTop = bigHeight;\n        bigOffsetTop = HEIGHT - offsetTop;\n      } else {\n        // We are wide, going to take up the whole height and arrange the small\n        // guys on the right\n        bigHeight = HEIGHT;\n        bigWidth = Math.floor(WIDTH * this.opts.bigPercentage);\n        offsetLeft = bigWidth;\n        bigOffsetLeft = WIDTH - offsetLeft;\n      }\n      if (this.opts.bigFirst) {\n        this.arrange(\n          bigOnes,\n          bigWidth,\n          bigHeight,\n          0,\n          0,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n        this.arrange(\n          smallOnes,\n          WIDTH - offsetLeft,\n          HEIGHT - offsetTop,\n          offsetLeft,\n          offsetTop,\n          this.opts.fixedRatio,\n          this.opts.minRatio,\n          this.opts.maxRatio,\n          this.opts.animate,\n        );\n      } else {\n        this.arrange(\n          smallOnes,\n          WIDTH - offsetLeft,\n          HEIGHT - offsetTop,\n          0,\n          0,\n          this.opts.fixedRatio,\n          this.opts.minRatio,\n          this.opts.maxRatio,\n          this.opts.animate,\n        );\n        this.arrange(\n          bigOnes,\n          bigWidth,\n          bigHeight,\n          bigOffsetLeft,\n          bigOffsetTop,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n      }\n    } else if (bigOnes.length > 0 && smallOnes.length === 0) {\n      this\n        // We only have one bigOne just center it\n        .arrange(\n          bigOnes,\n          WIDTH,\n          HEIGHT,\n          0,\n          0,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n    } else {\n      this.arrange(\n        smallOnes,\n        WIDTH - offsetLeft,\n        HEIGHT - offsetTop,\n        offsetLeft,\n        offsetTop,\n        this.opts.fixedRatio,\n        this.opts.minRatio,\n        this.opts.maxRatio,\n        this.opts.animate,\n      );\n    }\n  }\n\n  initLayoutContainer(container, opts) {\n    this.opts = {\n      maxRatio: opts.maxRatio != null ? opts.maxRatio : 3 / 2,\n      minRatio: opts.minRatio != null ? opts.minRatio : 9 / 16,\n      fixedRatio: opts.fixedRatio != null ? opts.fixedRatio : false,\n      animate: opts.animate != null ? opts.animate : false,\n      bigClass: opts.bigClass != null ? opts.bigClass : 'OT_big',\n      bigPercentage: opts.bigPercentage != null ? opts.bigPercentage : 0.8,\n      bigFixedRatio: opts.bigFixedRatio != null ? opts.bigFixedRatio : false,\n      bigMaxRatio: opts.bigMaxRatio != null ? opts.bigMaxRatio : 3 / 2,\n      bigMinRatio: opts.bigMinRatio != null ? opts.bigMinRatio : 9 / 16,\n      bigFirst: opts.bigFirst != null ? opts.bigFirst : true,\n    };\n    this.layoutContainer = typeof container === 'string' ? $(container) : container;\n  }\n\n  setLayoutOptions(options) {\n    this.opts = options;\n  }\n}\nexport default OpenViduLayout;\n","class UserModel {\n    connectionId;\n    audioActive;\n    videoActive;\n    screenShareActive;\n    nickname;\n    streamManager;\n    type; // 'remote' | 'local'\n\n    constructor() {\n        this.connectionId = '';\n        this.audioActive = true;\n        this.videoActive = true;\n        this.screenShareActive = false;\n        this.nickname = '';\n        this.streamManager = null;\n        this.type = 'local';\n    }\n\n    isAudioActive() {\n        return this.audioActive;\n    }\n\n    isVideoActive() {\n        return this.videoActive;\n    }\n\n    isScreenShareActive() {\n        return this.screenShareActive;\n    }\n\n    getConnectionId() {\n        return this.connectionId;\n    }\n\n    getNickname() {\n        return this.nickname;\n    }\n\n    getStreamManager() {\n        return this.streamManager;\n    }\n\n    isLocal() {\n        return this.type === 'local';\n    }\n    isRemote() {\n        return !this.isLocal();\n    }\n    setAudioActive(isAudioActive) {\n        this.audioActive = isAudioActive;\n    }\n    setVideoActive(isVideoActive) {\n        this.videoActive = isVideoActive;\n    }\n    setScreenShareActive(isScreenShareActive) {\n        this.screenShareActive = isScreenShareActive;\n    }\n    setStreamManager(streamManager) {\n        this.streamManager = streamManager;\n    }\n\n    setConnectionId(conecctionId) {\n        this.connectionId = conecctionId;\n    }\n    setNickname(nickname) {\n        this.nickname = nickname;\n    }\n    setType(type) {\n        if (type === 'local' |  type === 'remote') {\n            this.type = type;\n        }\n    }\n}\n\nexport default UserModel;\n","import React, { Component } from 'react';\nimport './ToolbarComponent.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport Mic from '@material-ui/icons/Mic';\nimport MicOff from '@material-ui/icons/MicOff';\nimport Videocam from '@material-ui/icons/Videocam';\nimport VideocamOff from '@material-ui/icons/VideocamOff';\nimport Fullscreen from '@material-ui/icons/Fullscreen';\nimport FullscreenExit from '@material-ui/icons/FullscreenExit';\nimport SwitchVideoIcon from '@material-ui/icons/SwitchVideo';\n// import PictureInPicture from '@material-ui/icons/PictureInPicture';\n// import ScreenShare from '@material-ui/icons/ScreenShare';\n// import StopScreenShare from '@material-ui/icons/StopScreenShare';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PowerSettingsNew from '@material-ui/icons/PowerSettingsNew';\nimport QuestionAnswer from '@material-ui/icons/QuestionAnswer';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from \"react-router-dom\";\n// const logo = require('../../assets/images/openvidu_logo.png');\nconsole.log('툴바 컴포넌트 내부');\n\nexport default class ToolbarComponent extends Component {\n    constructor(props) {\n        console.log('툴바 컴포넌트 내부 생성자');\n        super(props);\n        console.log(super(props));\n        console.log(props);\n        this.state = { fullscreen: false };\n        this.camStatusChanged = this.camStatusChanged.bind(this);\n        this.micStatusChanged = this.micStatusChanged.bind(this);\n        // this.screenShare = this.screenShare.bind(this);\n        // this.stopScreenShare = this.stopScreenShare.bind(this);\n        this.toggleFullscreen = this.toggleFullscreen.bind(this);\n        this.switchCamera = this.switchCamera.bind(this);\n        this.leaveSession = this.leaveSession.bind(this);\n        this.toggleChat = this.toggleChat.bind(this);\n    }\n\n\n    micStatusChanged() {\n        this.props.micStatusChanged();\n    }\n\n    camStatusChanged() {\n        this.props.camStatusChanged();\n    }\n\n    // screenShare() {\n    //     this.props.screenShare();\n    // }\n\n    // stopScreenShare() {\n    //     this.props.stopScreenShare();\n    // }\n\n    toggleFullscreen() {\n        this.setState({ fullscreen: !this.state.fullscreen });\n        this.props.toggleFullscreen();\n    }\n\n    switchCamera() {\n        this.props.switchCamera();\n    }\n\n    leaveSession() {\n        const leaveSession = this.props.leaveSession();\n        // return(\n        //     <Link to=\"/\">{leaveSession}</Link>\n        // )\n    }\n\n    toggleChat() {\n        console.log('토글챗. ')\n        this.props.toggleChat();\n    }\n\n    render() {\n        const mySessionId = this.props.sessionId;\n        const localUser = this.props.user;\n        console.log('여기도 생성자 뒤 맨 처음?');\n        return (\n            <AppBar className=\"toolbar\" id=\"header\">\n                <Toolbar className=\"toolbar\">\n                    <div id=\"navSessionInfo\">\n                        {console.log('툴바 요소안에 div')}\n                        {/* <img\n                            id=\"header_img\" \n                            alt=\"OpenVidu Logo\"\n                            src={logo}\n                        /> */}\n\n                        {this.props.sessionId && <div id=\"titleContent\">\n                            <span id=\"session-title\">{mySessionId}</span>\n                        </div>}\n                    </div>\n\n                    <div className=\"buttonsContent\">\n                        <IconButton color=\"inherit\" className=\"navButton\" id=\"navMicButton\" onClick={this.micStatusChanged}>\n                            {localUser !== undefined && localUser.isAudioActive() ? <Mic /> : <MicOff color=\"secondary\" />}\n                        </IconButton>\n\n                        <IconButton color=\"inherit\" className=\"navButton\" id=\"navCamButton\" onClick={this.camStatusChanged}>\n                            {localUser !== undefined && localUser.isVideoActive() ? (\n                                <Videocam />\n                            ) : (\n                                <VideocamOff color=\"secondary\" />\n                            )}\n                        </IconButton>\n\n                        {/* <IconButton color=\"inherit\" className=\"navButton\" onClick={this.screenShare}>\n                            {localUser !== undefined && localUser.isScreenShareActive() ? <PictureInPicture /> : <ScreenShare />}\n                        </IconButton> */}\n\n                        {/* {localUser !== undefined &&\n                            localUser.isScreenShareActive() && (\n                                <IconButton onClick={this.stopScreenShare} id=\"navScreenButton\">\n                                    <StopScreenShare color=\"secondary\" />\n                                </IconButton>\n                            )} */}\n\n                        <IconButton color=\"inherit\" className=\"navButton\" onClick={this.switchCamera}>\n                            <SwitchVideoIcon />\n                        </IconButton>\n                        <IconButton color=\"inherit\" className=\"navButton\" onClick={this.toggleFullscreen}>\n                            {localUser !== undefined && this.state.fullscreen ? <FullscreenExit /> : <Fullscreen />}\n                        </IconButton>\n                        <Link to=\"/\">\n                            <IconButton color=\"secondary\" className=\"navButton\" onClick={this.leaveSession} id=\"navLeaveButton\">\n                                <PowerSettingsNew />\n                            </IconButton>\n                        </Link>\n                         <IconButton color=\"inherit\" onClick={this.toggleChat} id=\"navChatButton\">\n                            {this.props.showNotification && <div id=\"point\" className=\"\" />}\n                            <Tooltip title=\"Chat\">\n                                <QuestionAnswer />\n                            </Tooltip>\n                        </IconButton>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        );\n    }\n}\n","import React from \"react\";\n\nfunction WaitTemporary(props){\n    console.log(props);\n    \n\n    return(\n        <div>\n            waiting\n        </div>\n    )\n}\nexport default WaitTemporary;","import React from 'react';\n\nfunction OvercrowdingPage(props){\n    return(\n        <div>\n            <h1>현재 접속 인원이 너무 많습니다.</h1>\n            <p>사용화면을 하나만 켜 주시기 바랍니다.</p>\n\n            <p>새로고침 후 재이용 가능합니다.</p>\n        </div>\n    )\n}\nexport default OvercrowdingPage;","import React, { Component } from 'react';\nimport { OpenVidu } from 'openvidu-browser';\nimport UserModel from '../../models/user-model';\n\nvar localUser = new UserModel();\n\nexport default class ToolbarComponent extends Component {\n    //컴포넌트 생명주기2 - 렌더링 이후 호출됨\n    componentDidMount() {\n        console.log('3');\n        const openViduLayoutOptions = {\n            maxRatio: 3 / 2, // The narrowest ratio that will be used (default 2x3)\n            minRatio: 9 / 16, // The widest ratio that will be used (default 16x9)\n            fixedRatio: false, // If this is true then the aspect ratio of the video is maintained and minRatio and maxRatio are ignored (default false)\n            bigClass: 'OV_big', // The class to add to elements that should be sized bigger\n            bigPercentage: 0.8, // The maximum percentage of space the big ones should take up\n            bigFixedRatio: false, // fixedRatio for the big ones\n            bigMaxRatio: 3 / 2, // The narrowest ratio to use for the big elements (default 2x3)\n            bigMinRatio: 9 / 16, // The widest ratio to use for the big elements (default 16x9)\n            bigFirst: true, // Whether to place the big one in the top left (true) or bottom right\n            animate: true, // Whether you want to animate the transitions\n        };\n    \n        this.layout.initLayoutContainer(document.getElementById('layout'), openViduLayoutOptions);\n        window.addEventListener('beforeunload', this.onbeforeunload);\n        window.addEventListener('resize', this.updateLayout);\n        window.addEventListener('resize', this.checkSize);\n        this.joinSession();\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onbeforeunload);\n        window.removeEventListener('resize', this.updateLayout);\n        window.removeEventListener('resize', this.checkSize);\n        this.leaveSession();\n    }\n    \n    onbeforeunload(event) {\n        this.leaveSession();\n    }\n    \n    //화상회의 세션 참가\n    joinSession() {\n        this.OV = new OpenVidu();\n    \n        // session 초기화\n        this.setState(\n            {\n                session: this.OV.initSession(),\n            },\n            async () => {\n                this.subscribeToStreamCreated();\n                await this.connectToSession();\n            },\n        );\n    }\n    \n    //세션 연결\n    async connectToSession() {\n        if (this.props.token !== undefined) {\n            console.log('token received: ', this.props.token);\n            this.connect(this.props.token);\n        } else {\n            try {\n                var token = await this.getToken();\n                console.log(token);\n                this.connect(token);\n            } catch (error) {\n                console.error('There was an error getting the token:', error.code, error.message);\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error getting the token:', error.message);\n            }\n        }\n    }\n    \n    //토큰, myUserName 이용 세션 연결\n    connect(token) {\n        this.state.session\n            .connect(\n                token,\n                { clientData: this.state.myUserName },\n            )\n            // 세션 연결 이후 캠 연결\n            .then(() => {\n                this.connectWebCam();\n            })\n            .catch((error) => {\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error connecting to the session:', error.message);\n                console.log('There was an error connecting to the session:', error.code, error.message);\n            });\n    }\n    \n    //카메라 연결\n    async connectWebCam() {\n        await this.OV.getUserMedia({ audioSource: undefined, videoSource: undefined });\n        var devices = await this.OV.getDevices();\n        var videoDevices = devices.filter(device => device.kind === 'videoinput');\n        console.log('카메라 연결');\n        //로컬사용자 방송송출 관련 객체\n        let publisher = this.OV.initPublisher(undefined, {\n            audioSource: undefined,\n            videoSource: videoDevices[0].deviceId,\n            publishAudio: localUser.isAudioActive(),\n            publishVideo: localUser.isVideoActive(),\n            resolution: '640x480',\n            frameRate: 30,\n            insertMode: 'APPEND',\n        });\n    \n        if (this.state.session.capabilities.publish) {\n            publisher.on('accessAllowed' , () => {\n                this.state.session.publish(publisher).then(() => {\n                    this.updateSubscribers();\n                    this.localUserAccessAllowed = true;\n                    if (this.props.joinSession) {\n                        this.props.joinSession();\n                    }\n                });\n            });\n    \n        }\n        localUser.setNickname(this.state.myUserName);\n        localUser.setConnectionId(this.state.session.connection.connectionId);\n        localUser.setStreamManager(publisher);\n        this.subscribeToUserChanged();\n        this.subscribeToStreamDestroyed();\n        \n        this.setState({ currentVideoDevice: videoDevices[0], localUser: localUser }, () => {\n            this.state.localUser.getStreamManager().on('streamPlaying', (e) => {\n                this.updateLayout();\n                publisher.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n        });\n    }\n    \n    //화상통화 참여자 갱신\n    updateSubscribers() {\n        var subscribers = this.remotes;\n        this.setState(\n            {\n                subscribers: subscribers,\n            },\n            () => {\n                // localUser가 undefined or null이 아닌 경우\n                if (this.state.localUser) {\n                    this.sendSignalUserChanged({\n                        isAudioActive: this.state.localUser.isAudioActive(),\n                        isVideoActive: this.state.localUser.isVideoActive(),\n                        nickname: this.state.localUser.getNickname(),\n                    });\n                }\n                this.updateLayout();\n            },\n        );\n    }\n    \n    leaveSession() {\n        const mySession = this.state.session;\n    \n        if (mySession) {\n            mySession.disconnect();\n        }\n    \n        // Empty all properties...\n        this.OV = null;\n        this.setState({\n            session: undefined,\n            subscribers: [],\n            mySessionId: 'SessionA',\n            myUserName: 'OpenVidu_User' + Math.floor(Math.random() * 100),\n            localUser: undefined,\n        });\n        if (this.props.leaveSession) {\n            this.props.leaveSession();\n        }\n    }\n    \n    //카메라 상태 변화\n    camStatusChanged() {\n        localUser.setVideoActive(!localUser.isVideoActive());\n        localUser.getStreamManager().publishVideo(localUser.isVideoActive());\n        this.sendSignalUserChanged({ isVideoActive: localUser.isVideoActive() });\n        this.setState({ localUser: localUser });\n    }\n    \n    // 마이크 ON/OFF\n    micStatusChanged() {\n        localUser.setAudioActive(!localUser.isAudioActive());\n        localUser.getStreamManager().publishAudio(localUser.isAudioActive());\n        this.sendSignalUserChanged({ isAudioActive: localUser.isAudioActive() });\n        this.setState({ localUser: localUser });\n    }\n    \n    nicknameChanged(nickname) {\n        let localUser = this.state.localUser;\n        localUser.setNickname(nickname);\n        this.setState({ localUser: localUser });\n        this.sendSignalUserChanged({ nickname: this.state.localUser.getNickname() });\n    }\n    \n    deleteSubscriber(stream) {\n        const remoteUsers = this.state.subscribers;\n        const userStream = remoteUsers.filter((user) => user.getStreamManager().stream === stream)[0];\n        let index = remoteUsers.indexOf(userStream, 0);\n        if (index > -1) {\n            remoteUsers.splice(index, 1);\n            this.setState({\n                subscribers: remoteUsers,\n            });\n        }\n    }\n    \n    \n    subscribeToStreamCreated() {\n        this.state.session.on('streamCreated', (event) => {\n            const subscriber = this.state.session.subscribe(event.stream, undefined);\n            // var subscribers = this.state.subscribers;\n            subscriber.on('streamPlaying', (e) => {\n                subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n            const newUser = new UserModel();\n            newUser.setStreamManager(subscriber);\n            newUser.setConnectionId(event.stream.connection.connectionId);\n            newUser.setType('remote');\n            const nickname = event.stream.connection.data.split('%')[0];\n            newUser.setNickname(JSON.parse(nickname).clientData);\n            this.remotes.push(newUser);\n            if(this.localUserAccessAllowed) {\n                this.updateSubscribers();\n            }\n        });\n    }\n    \n    subscribeToStreamDestroyed() {\n        // On every Stream destroyed...\n        this.state.session.on('streamDestroyed', (event) => {\n            // Remove the stream from 'subscribers' array\n            this.deleteSubscriber(event.stream);\n            event.preventDefault();\n            this.updateLayout();\n        });\n    }\n    \n    subscribeToUserChanged() {\n        this.state.session.on('signal:userChanged', (event) => {\n            let remoteUsers = this.state.subscribers;\n            remoteUsers.forEach((user) => {\n                if (user.getConnectionId() === event.from.connectionId) {\n                    const data = JSON.parse(event.data);\n                    console.log('EVENTO REMOTE: ', event.data);\n                    if (data.isAudioActive !== undefined) {\n                        user.setAudioActive(data.isAudioActive);\n                    }\n                    if (data.isVideoActive !== undefined) {\n                        user.setVideoActive(data.isVideoActive);\n                    }\n                    if (data.nickname !== undefined) {\n                        user.setNickname(data.nickname);\n                    }\n                }\n            });\n            this.setState(\n                {\n                    subscribers: remoteUsers,\n                },\n            );\n        });\n    }\n    \n    updateLayout() {\n        setTimeout(() => {\n            this.layout.updateLayout();\n        }, 20);\n    }\n    \n    // 유저 변경 시 신호 전달 함수\n    sendSignalUserChanged(data) {\n        const signalOptions = {\n            data: JSON.stringify(data),\n            type: 'userChanged',\n        };\n        this.state.session.signal(signalOptions);\n    }\n    \n    // 전체화면 ON / OFF\n    toggleFullscreen() {\n        const document = window.document;\n        const fs = document.getElementById('container');\n        if (\n            !document.fullscreenElement &&\n            !document.mozFullScreenElement &&\n            !document.webkitFullscreenElement &&\n            !document.msFullscreenElement\n        ) {\n            if (fs.requestFullscreen) {\n                fs.requestFullscreen();\n            } else if (fs.msRequestFullscreen) {\n                fs.msRequestFullscreen();\n            } else if (fs.mozRequestFullScreen) {\n                fs.mozRequestFullScreen();\n            } else if (fs.webkitRequestFullscreen) {\n                fs.webkitRequestFullscreen();\n            }\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n    }\n    \n    async switchCamera() {\n        try{\n            const devices = await this.OV.getDevices()\n            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n    \n            if(videoDevices && videoDevices.length > 1) {\n    \n                var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId)\n    \n                if (newVideoDevice.length > 0) {\n                    // Creating a new publisher with specific videoSource\n                    // In mobile devices the default and first camera is the front one\n                    var newPublisher = this.OV.initPublisher(undefined, {\n                        audioSource: undefined,\n                        videoSource: newVideoDevice[0].deviceId,\n                        publishAudio: localUser.isAudioActive(),\n                        publishVideo: localUser.isVideoActive(),\n                        mirror: true\n                    });\n    \n                    //newPublisher.once(\"accessAllowed\", () => {\n                    await this.state.session.unpublish(this.state.localUser.getStreamManager());\n                    await this.state.session.publish(newPublisher)\n                    this.state.localUser.setStreamManager(newPublisher);\n                    this.setState({\n                        currentVideoDevice: newVideoDevice,\n                        localUser: localUser,\n                    });\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    \n    closeDialogExtension() {\n        this.setState({ showExtensionDialog: false });\n    }\n    \n    toggleChat(property) {\n        let display = property;\n    \n        if (display === undefined) {\n            display = this.state.chatDisplay === 'none' ? 'block' : 'none';\n        }\n        if (display === 'block') {\n            this.setState({ chatDisplay: display, messageReceived: false });\n        } else {\n            console.log('chat', display);\n            this.setState({ chatDisplay: display });\n        }\n        this.updateLayout();\n    }\n    \n    checkNotification(event) {\n        this.setState({\n            messageReceived: this.state.chatDisplay === 'none',\n        });\n    }\n    checkSize() {\n        if(document.getElementById('layout')===null) return;\n        if (document.getElementById('layout').offsetWidth <= 700 && !this.hasBeenUpdated) {\n            this.toggleChat('none');\n            this.hasBeenUpdated = true;\n        }\n        if (document.getElementById('layout').offsetWidth > 700 && this.hasBeenUpdated) {\n            this.hasBeenUpdated = false;\n        }\n    }\n    \n\n}\n","import axios from 'axios';\nimport { OpenVidu } from 'openvidu-browser';\nimport React, { Component } from 'react';\nimport ChatComponent from './chat/ChatComponent';\nimport StreamComponent from './stream/StreamComponent';\nimport './VideoRoomComponent.css';\n\nimport OpenViduLayout from '../layout/openvidu-layout';\nimport UserModel from '../models/user-model';\nimport ToolbarComponent from './toolbar/ToolbarComponent';\nimport WaitTemporary from '../pages/WaitTemporary/WaitTemporary';\nimport OvercrowdingPage from '../pages/ErrorPage/OvercrowdingPage';\nimport VideoRoomComponentFunction from './VideoRoomComponentFunction/VideoRoomComponentFunction';\n\n//localUser 초기화\nvar localUser = new UserModel();\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:5000/';\nconsole.log('0');\n\nclass VideoRoomComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.hasBeenUpdated = false;\n        this.layout = new OpenViduLayout();\n        console.log('1');\n        console.log(this.layout);\n\n        //접속할 sessionName, userName를 컴포넌트에 props로 전달\n        let sessionName = this.props.sessionName ? this.props.sessionName : 'SessionA';\n        \n        // 랜덤한 문자열 생성\n        const generateRandomString = (num) => {\n            const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n            let result = '';\n            const charactersLength = characters.length;\n            for (let i = 0; i < num; i++) {\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\n            }\n          \n            return result;\n          }\n        // 임의의 sessionName을 지정\n        // let sessionName = generateRandomString(5);\n        console.log(`sessionName : ${sessionName}`);\n\n        //다른 openvidu코드 보면 세션 이름 정해서 들어오는 코드 있는데 그거 참고해서 세션이름 정해서 하기\n        let userName = this.props.user ? this.props.user : 'OpenVidu_User' + Math.floor(Math.random() * 100);\n        this.remotes = [];\n        this.localUserAccessAllowed = false;\n        /**\n         * mySessionId : 현재 접속해 있는 세션 이름\n         * myUserName : 현재 접속한 유저의 식별이름\n         * session : 현재 접속한 세션 객체\n         * localUser : 현재 접속한 유저 객체\n         * subscribers : 접속한 유저들\n         * chatDisplay : 채팅 토글\n         * currentVideoDevice : 지금 사용 중인 기기\n         */\n        this.state = {\n            mySessionId: sessionName,\n            myUserName: userName,\n            session: undefined,\n            localUser: undefined,\n            subscribers: [],\n            chatDisplay: 'none',\n            currentVideoDevice: undefined,\n            relode:0,\n        };\n\n        this.joinSession = this.joinSession.bind(this);\n        this.leaveSession = this.leaveSession.bind(this);\n        this.onbeforeunload = this.onbeforeunload.bind(this);\n        this.updateLayout = this.updateLayout.bind(this);\n        this.camStatusChanged = this.camStatusChanged.bind(this);\n        this.micStatusChanged = this.micStatusChanged.bind(this);\n        this.nicknameChanged = this.nicknameChanged.bind(this);\n        this.toggleFullscreen = this.toggleFullscreen.bind(this);\n        this.switchCamera = this.switchCamera.bind(this);\n        this.closeDialogExtension = this.closeDialogExtension.bind(this);\n        this.toggleChat = this.toggleChat.bind(this);\n        this.checkNotification = this.checkNotification.bind(this);\n        this.checkSize = this.checkSize.bind(this);\n    }\n\n    //컴포넌트 생명주기2 - 렌더링 이후 호출됨\n    componentDidMount() {\n        console.log('3');\n        const openViduLayoutOptions = {\n            maxRatio: 3 / 2, // The narrowest ratio that will be used (default 2x3)\n            minRatio: 9 / 16, // The widest ratio that will be used (default 16x9)\n            fixedRatio: false, // If this is true then the aspect ratio of the video is maintained and minRatio and maxRatio are ignored (default false)\n            bigClass: 'OV_big', // The class to add to elements that should be sized bigger\n            bigPercentage: 0.8, // The maximum percentage of space the big ones should take up\n            bigFixedRatio: false, // fixedRatio for the big ones\n            bigMaxRatio: 3 / 2, // The narrowest ratio to use for the big elements (default 2x3)\n            bigMinRatio: 9 / 16, // The widest ratio to use for the big elements (default 16x9)\n            bigFirst: true, // Whether to place the big one in the top left (true) or bottom right\n            animate: true, // Whether you want to animate the transitions\n        };\n\n        this.layout.initLayoutContainer(document.getElementById('layout'), openViduLayoutOptions);\n        window.addEventListener('beforeunload', this.onbeforeunload);\n        window.addEventListener('resize', this.updateLayout);\n        window.addEventListener('resize', this.checkSize);\n        this.joinSession();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onbeforeunload);\n        window.removeEventListener('resize', this.updateLayout);\n        window.removeEventListener('resize', this.checkSize);\n        this.leaveSession();\n    }\n\n    onbeforeunload(event) {\n        this.leaveSession();\n    }\n\n    //화상회의 세션 참가\n    joinSession() {\n        this.OV = new OpenVidu();\n\n        // session 초기화\n        this.setState(\n            {\n                session: this.OV.initSession(),\n            },\n            async () => {\n                this.subscribeToStreamCreated();\n                await this.connectToSession();\n            },\n        );\n    }\n\n    //세션 연결\n    async connectToSession() {\n        console.log(`this.props.token : ${this.props.token}`);\n        if (this.props.token !== undefined) {\n            console.log('token received: ', this.props.token);\n            this.connect(this.props.token);\n        } else {\n            try {\n                var token = await this.getToken();\n                console.log(token);\n                this.connect(token);\n            } catch (error) {\n                console.error('There was an error getting the token:', error.code, error.message);\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error getting the token:', error.message);\n            }\n        }\n    }\n\n    //토큰, myUserName 이용 세션 연결\n    connect(token) {\n        this.state.session\n            .connect(\n                token,\n                { clientData: this.state.myUserName },\n            )\n            // 세션 연결 이후 캠 연결\n            .then(() => {\n                this.connectWebCam();\n            })\n            .catch((error) => {\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error connecting to the session:', error.message);\n                console.log('There was an error connecting to the session:', error.code, error.message);\n            });\n    }\n\n    //카메라 연결\n    async connectWebCam() {\n        await this.OV.getUserMedia({ audioSource: undefined, videoSource: undefined });\n        var devices = await this.OV.getDevices();\n        var videoDevices = devices.filter(device => device.kind === 'videoinput');\n        console.log('카메라 연결');\n        //로컬사용자 방송송출 관련 객체\n        let publisher = this.OV.initPublisher(undefined, {\n            audioSource: undefined,\n            videoSource: videoDevices[0].deviceId,\n            publishAudio: localUser.isAudioActive(),\n            publishVideo: localUser.isVideoActive(),\n            resolution: '640x480',\n            frameRate: 30,\n            insertMode: 'APPEND',\n        });\n\n        if (this.state.session.capabilities.publish) {\n            publisher.on('accessAllowed' , () => {\n                this.state.session.publish(publisher).then(() => { \n                    this.updateSubscribers();\n                    this.localUserAccessAllowed = true;\n                    if (this.props.joinSession) {\n                        this.props.joinSession();\n                    }\n                });\n            });\n\n        }\n        localUser.setNickname(this.state.myUserName);\n        localUser.setConnectionId(this.state.session.connection.connectionId);\n        localUser.setStreamManager(publisher);\n        this.subscribeToUserChanged();\n        this.subscribeToStreamDestroyed();\n        \n        this.setState({ currentVideoDevice: videoDevices[0], localUser: localUser }, () => {\n            this.state.localUser.getStreamManager().on('streamPlaying', (e) => {\n                this.updateLayout();\n                publisher.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n        });\n    }\n\n    //화상통화 참여자 갱신\n    updateSubscribers() {\n        var subscribers = this.remotes;\n        this.setState(\n            {\n                subscribers: subscribers,\n            },\n            () => {\n                // localUser가 undefined or null이 아닌 경우\n                if (this.state.localUser) {\n                    this.sendSignalUserChanged({\n                        isAudioActive: this.state.localUser.isAudioActive(),\n                        isVideoActive: this.state.localUser.isVideoActive(),\n                        nickname: this.state.localUser.getNickname(),\n                    });\n                }\n                this.updateLayout();\n            },\n        );\n    }\n\n    leaveSession() {\n        const mySession = this.state.session;\n\n        if (mySession) {\n            mySession.disconnect();\n        }\n\n        // Empty all properties...\n        this.OV = null;\n        this.setState({\n            session: undefined,\n            subscribers: [],\n            mySessionId: 'SessionA',\n            myUserName: 'OpenVidu_User' + Math.floor(Math.random() * 100),\n            localUser: undefined,\n        });\n        if (this.props.leaveSession) {\n            this.props.leaveSession();\n        }\n    }\n\n    //카메라 상태 변화\n    camStatusChanged() {\n        localUser.setVideoActive(!localUser.isVideoActive());\n        localUser.getStreamManager().publishVideo(localUser.isVideoActive());\n        this.sendSignalUserChanged({ isVideoActive: localUser.isVideoActive() });\n        this.setState({ localUser: localUser });\n    }\n\n    // 마이크 ON/OFF\n    micStatusChanged() {\n        localUser.setAudioActive(!localUser.isAudioActive());\n        localUser.getStreamManager().publishAudio(localUser.isAudioActive());\n        this.sendSignalUserChanged({ isAudioActive: localUser.isAudioActive() });\n        this.setState({ localUser: localUser });\n    }\n\n    nicknameChanged(nickname) {\n        let localUser = this.state.localUser;\n        localUser.setNickname(nickname);\n        this.setState({ localUser: localUser });\n        this.sendSignalUserChanged({ nickname: this.state.localUser.getNickname() });\n    }\n\n    deleteSubscriber(stream) {\n        const remoteUsers = this.state.subscribers;\n        const userStream = remoteUsers.filter((user) => user.getStreamManager().stream === stream)[0];\n        let index = remoteUsers.indexOf(userStream, 0);\n        if (index > -1) {\n            remoteUsers.splice(index, 1);\n            this.setState({\n                subscribers: remoteUsers,\n            });\n        }\n    }\n\n    \n    subscribeToStreamCreated() {\n        this.state.session.on('streamCreated', (event) => {\n            const subscriber = this.state.session.subscribe(event.stream, undefined);\n            // var subscribers = this.state.subscribers;\n            subscriber.on('streamPlaying', (e) => {\n                subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n            const newUser = new UserModel();\n            newUser.setStreamManager(subscriber);\n            newUser.setConnectionId(event.stream.connection.connectionId);\n            newUser.setType('remote');\n            const nickname = event.stream.connection.data.split('%')[0];\n            newUser.setNickname(JSON.parse(nickname).clientData);\n            this.remotes.push(newUser);\n            if(this.localUserAccessAllowed) {\n                this.updateSubscribers();\n            }\n        });\n    }\n\n    subscribeToStreamDestroyed() {\n        // On every Stream destroyed...\n        this.state.session.on('streamDestroyed', (event) => {\n            // Remove the stream from 'subscribers' array\n            this.deleteSubscriber(event.stream);\n            event.preventDefault();\n            this.updateLayout();\n        });\n    }\n\n    subscribeToUserChanged() {\n        this.state.session.on('signal:userChanged', (event) => {\n            let remoteUsers = this.state.subscribers;\n            remoteUsers.forEach((user) => {\n                if (user.getConnectionId() === event.from.connectionId) {\n                    const data = JSON.parse(event.data);\n                    console.log('EVENTO REMOTE: ', event.data);\n                    if (data.isAudioActive !== undefined) {\n                        user.setAudioActive(data.isAudioActive);\n                    }\n                    if (data.isVideoActive !== undefined) {\n                        user.setVideoActive(data.isVideoActive);\n                    }\n                    if (data.nickname !== undefined) {\n                        user.setNickname(data.nickname);\n                    }\n                }\n            });\n            this.setState(\n                {\n                    subscribers: remoteUsers,\n                },\n            );\n        });\n    }\n\n    updateLayout() {\n        setTimeout(() => {\n            this.layout.updateLayout();\n        }, 20);\n    }\n\n    // 유저 변경 시 신호 전달 함수\n    sendSignalUserChanged(data) {\n        const signalOptions = {\n            data: JSON.stringify(data),\n            type: 'userChanged',\n        };\n        this.state.session.signal(signalOptions);\n    }\n\n    // 전체화면 ON / OFF\n    toggleFullscreen() {\n        const document = window.document;\n        const fs = document.getElementById('container');\n        if (\n            !document.fullscreenElement &&\n            !document.mozFullScreenElement &&\n            !document.webkitFullscreenElement &&\n            !document.msFullscreenElement\n        ) {\n            if (fs.requestFullscreen) {\n                fs.requestFullscreen();\n            } else if (fs.msRequestFullscreen) {\n                fs.msRequestFullscreen();\n            } else if (fs.mozRequestFullScreen) {\n                fs.mozRequestFullScreen();\n            } else if (fs.webkitRequestFullscreen) {\n                fs.webkitRequestFullscreen();\n            }\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n    }\n\n    async switchCamera() {\n        try{\n            const devices = await this.OV.getDevices()\n            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n\n            if(videoDevices && videoDevices.length > 1) {\n\n                var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId)\n\n                if (newVideoDevice.length > 0) {\n                    // Creating a new publisher with specific videoSource\n                    // In mobile devices the default and first camera is the front one\n                    var newPublisher = this.OV.initPublisher(undefined, {\n                        audioSource: undefined,\n                        videoSource: newVideoDevice[0].deviceId,\n                        publishAudio: localUser.isAudioActive(),\n                        publishVideo: localUser.isVideoActive(),\n                        mirror: true\n                    });\n\n                    //newPublisher.once(\"accessAllowed\", () => {\n                    await this.state.session.unpublish(this.state.localUser.getStreamManager());\n                    await this.state.session.publish(newPublisher)\n                    this.state.localUser.setStreamManager(newPublisher);\n                    this.setState({\n                        currentVideoDevice: newVideoDevice,\n                        localUser: localUser,\n                    });\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    closeDialogExtension() {\n        this.setState({ showExtensionDialog: false });\n    }\n\n    toggleChat(property) {\n        let display = property;\n\n        if (display === undefined) {\n            display = this.state.chatDisplay === 'none' ? 'block' : 'none';\n        }\n        if (display === 'block') {\n            this.setState({ chatDisplay: display, messageReceived: false });\n        } else {\n            console.log('chat', display);\n            this.setState({ chatDisplay: display });\n        }\n        this.updateLayout();\n    }\n\n    checkNotification(event) {\n        this.setState({\n            messageReceived: this.state.chatDisplay === 'none',\n        });\n    }\n    checkSize() {\n        if(document.getElementById('layout')===null) return;\n        if (document.getElementById('layout').offsetWidth <= 700 && !this.hasBeenUpdated) {\n            this.toggleChat('none');\n            this.hasBeenUpdated = true;\n        }\n        if (document.getElementById('layout').offsetWidth > 700 && this.hasBeenUpdated) {\n            this.hasBeenUpdated = false;\n        }\n    }\n\n    render() {\n        const mySessionId = this.state.mySessionId;\n        console.log('2');\n        console.log(mySessionId);\n        const localUser = this.state.localUser;\n        var chatDisplay = { display: this.state.chatDisplay };\n        const now = this.state.subscribers;\n        if(now.length===0){\n            return(\n                <WaitTemporary/>\n            )\n        }else if(now.length===1){\n            return (\n                <div className=\"container\" id=\"container\">\n                    {/* 툴바 컴포넌트 */}\n                    {console.log('툴바 컴포넌트')}\n                    <ToolbarComponent\n                        sessionId={mySessionId}\n                        user={localUser}\n                        showNotification={this.state.messageReceived}\n                        camStatusChanged={this.camStatusChanged}\n                        micStatusChanged={this.micStatusChanged}\n                        toggleFullscreen={this.toggleFullscreen}\n                        switchCamera={this.switchCamera}\n                        leaveSession={this.leaveSession}\n                        toggleChat={this.toggleChat}\n                    />\n    \n    \n                    {/* 스트리밍 화면 */}\n                    {console.log('스트리밍 화면')}\n                    <div id=\"layout\" className=\"bounds\">\n                        \n                        {/* 다른 이용자 화면 컴포넌트 */}\n                        {console.log('다른 이용자 화면')}\n                        {this.state.subscribers.map((sub, i) => (\n                            <div key={i} className=\"OT_root OT_publisher custom-class notMyCam\" id=\"remoteUsers\">\n                                <StreamComponent user={sub} streamId={sub.streamManager.stream.streamId} />\n                            </div>\n                        ))}\n    \n    \n                        {/* 자신 화면 컴포넌트 \n                            자기 외에 사람 있지만 채팅창 안 켠 경우 : 자기 외에 사람 있고 채팅창 켠 경우\n                        */}\n                        {console.log('자기 화면')}\n                        {chatDisplay.display==='none'?\n                        localUser !== undefined && localUser.getStreamManager() !== undefined && (\n                            <div className=\"OT_root OT_publisher custom-class\" id=\"localUser\">\n                                {console.log(document.getElementById(localUser))}\n                                <StreamComponent user={localUser} handleNickname={this.nicknameChanged} />\n                            </div>\n                        )\n                        :\n                        localUser !== undefined && localUser.getStreamManager() !== undefined && (\n                            <div className=\"OT_root OT_publisher custom-class myCam\" id=\"localUser\">\n                                {console.log(document.getElementById(localUser))}\n                                <StreamComponent user={localUser} handleNickname={this.nicknameChanged} camWidth={'18%'} />\n                                {/* 채팅 컴포넌트 */}\n                                <ChatComponent \n                                    user={localUser}\n                                    chatDisplay={this.state.chatDisplay}\n                                    close={this.toggleChat}\n                                    messageReceived={this.checkNotification}\n                                />\n                            </div>\n                        )}\n    \n    \n                    </div>\n                </div>\n            );\n        }else{\n            return(\n                <OvercrowdingPage/>\n            )\n        }\n        \n    }\n\n    /**\n     * --------------------------------------------\n     * GETTING A TOKEN FROM YOUR APPLICATION SERVER\n     * --------------------------------------------\n     * The methods below request the creation of a Session and a Token to\n     * your application server. This keeps your OpenVidu deployment secure.\n     *\n     * In this sample code, there is no user control at all. Anybody could\n     * access your application server endpoints! In a real production\n     * environment, your application server must identify the user to allow\n     * access to the endpoints.\n     *\n     * Visit https://docs.openvidu.io/en/stable/application-server to learn\n     * more about the integration of OpenVidu in your application server.\n     */\n    async getToken() {\n        console.log('getToken');\n        const sessionId = await this.createSession(this.state.mySessionId);\n        console.log(`sessionId : ${sessionId}`);\n        return await this.createToken(sessionId);\n    }\n\n    async createSession(sessionId) {\n        console.log('createSession');\n        const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions', { customSessionId: sessionId }, {\n            headers: { 'Content-Type': 'application/json', },\n        });\n        console.log(`createSession response : ${response.data}`);\n        return response.data; // The sessionId\n    }\n\n    async createToken(sessionId) {\n        console.log('createToken'); \n        const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions/' + sessionId + '/connections', {}, {\n            headers: { 'Content-Type': 'application/json', },\n        });\n        console.log(`createToken response : ${response.data}`)\n        return response.data; // The token\n\n    }\n}\nexport default VideoRoomComponent;\n\n","import React, { Fragment, useEffect } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport axios from \"axios\";\n\nconst SpeechRecognitor = (props) => {\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  useEffect(() => {\n    async function speechToSignLang() {\n      if (listening) return;\n      await axios\n        .get(`${props.BASE_URL}/recording/analyze?speech=${transcript}`)\n        .then((response) => {\n          props.onSpeech(response.data.trimEnd().split(' '));\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n    speechToSignLang();\n  }, [listening]);\n\n  if (!browserSupportsSpeechRecognition) {\n    return alert(\"Browser doesn't support speech recognition.\");\n  }\n\n  return (\n    <div>\n      <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n      <button onClick={SpeechRecognition.startListening}>Start</button>\n      <button onClick={SpeechRecognition.stopListening}>Stop</button>\n      <button onClick={resetTranscript}>Reset</button>\n      <p>{transcript}</p>\n    </div>\n  );\n};\n\nexport default SpeechRecognitor;\n","import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport { io } from \"socket.io-client\";\nimport * as faceapi from \"face-api.js\";\nimport styles from \"./AITranslate.module.css\";\nimport SpeechRecognitor from \"./SpeechRecognitor\";\nimport ReactPlayer from \"react-player/lazy\";\n\nconst PORT_NUMBER = 5000;\nconst FACE_API_MODEL_LOCATION = process.env.PUBLIC_URL + \"/models\";\nconst START_MESSAGE = \" 번역을 시작합니다. \";\nconst RELOCATION_MESSAGE = \" 사각형에 얼굴을 맞춰주세요. \";\nconst CORRECT_LOCATION_MESSAGE =\n  \" 현재 위치에서 번역을 시작 해 주시길 바랍니다. \";\nconst VIDEO_WIDTH = 640;\nconst VIDEO_HEIGHT = 480;\nlet BASE_URL = \"\";\nconst BASE_VIDEO_URL =\n  \"https://d204.s3.ap-northeast-1.amazonaws.com/수어애니메이션/\";\nconst AITranslate = () => {\n  let detectionInterval;\n\n  const jb = useRef();\n  const str = useRef();\n  const flag = useRef(0);\n  const video = useRef();\n  const animationVideo = useRef();\n  const socket = useRef();\n  const canvas = useRef();\n  const context = useRef();\n  const prevStr = useRef();\n  const _count = useRef(0);\n  const interval = useRef();\n  const faceBoxes = useRef([]);\n  const countWord = useRef(0);\n  const urls = useRef([]);\n\n  const [count, setCount] = useState(0);\n  const [notifyMessage, setNotifyMessage] = useState();\n  const [vidoeSrc, setVideoSrc] = useState(`${BASE_VIDEO_URL}가다.mp4`);\n\n  const setUiSize = () => {\n    // const width = window.innerWidth * 0.95;\n    // const height = window.innerHeight * 0.7;\n    // if (window.innerWidth >= 1280) {\n    //   video.current.width = width / 2;\n    //   video.current.height = height;\n    //   faceBoxes.current[0].width = video.current.width * 0.2;\n    //   faceBoxes.current[0].height = video.current.height * 0.2;\n    //   faceBoxes.current[1].width = video.current.width * 0.15;\n    //   faceBoxes.current[1].height = video.current.height * 0.15;\n    //   animationVideo.current.width = width / 2;\n    //   animationVideo.current.height = height;\n    // } else {\n    //   video.current.width = width;\n    //   video.current.height = height / 2;\n    //   animationVideo.current.width = width;\n    //   animationVideo.current.height = height / 2;\n    // }\n\n    //   const width = window.innerWidth * 0.95;\n    //   const height = window.innerHeight * 0.7;\n    // animationVideo.current.style = `height: ${video.current.height}`;\n\n    const videoOffsetWidth = video.current.offsetWidth;\n    const boxes = faceBoxes.current;\n    boxes[0].style = `width: ${parseInt(videoOffsetWidth * 0.16 + 0.5)}px;\n    height: ${parseInt(videoOffsetWidth * 0.16 + 0.5)}px;\n    left: ${parseInt(\n      videoOffsetWidth / 2.0 -\n        (videoOffsetWidth * 0.08 > 65 ? 65 : videoOffsetWidth * 0.08) +\n        0.5\n    )}px;`;\n    let outerBoxWidth = boxes[0].style.width;\n    let outerBoxLeft = boxes[0].style.left;\n    boxes[1].style = `width: ${\n      parseInt(outerBoxWidth.substring(0, outerBoxWidth.length - 2)) - 10\n    }px;\n    height: ${\n      parseInt(outerBoxWidth.substring(0, outerBoxWidth.length - 2)) - 10\n    }px;\n    left: ${\n      parseInt(outerBoxLeft.substring(0, outerBoxLeft.length - 2)) + 5\n    }px;`;\n  };\n\n  const browserResizeHandler = () => {\n    setUiSize();\n  };\n\n  const displaySize = () => {\n    return {\n      width: video.current.offsetWidth ? video.current.offsetWidth : \"0px\",\n      height: video.current.offsetHeight ? video.current.offsetHeight : \"0px\",\n    };\n  };\n\n  //최초 페이지 로딩 시 초기화\n  useEffect(() => {\n    //로컬호스트 통신\n    // BASE_URL =\n    //   window.location.protocol + \"//\" + document.domain + \":\" + PORT_NUMBER;\n    BASE_URL = \"https://sueo.shop/ai\";\n    //서버 통신\n    // BASE_URL = `http://3.35.127.122:5000`;\n\n    socket.current = io.connect(BASE_URL, {\n      cors: { origin: \"*\" },\n    });\n    socket.current.on(\"connect\", function () {\n      console.log(\"Connected...!\", socket.connected);\n    });\n    socket.current.on(\"response_back\", function (data) {\n      countWord.current++;\n      console.log(\"data\", data);\n      if (data === \"failed\") {\n        setNotifyMessage(\n          str.current + \"\\n단어 인식에 실패하였습니다. 다시 동작해주세요.\"\n        );\n        countWord.current--;\n        translate();\n      } else {\n        jb.current.value =\n          \"<p style = 'margin-top : -100px; text-align:center;font-size:30px;color:#ffffff'> 다음 단어를 입력해주세요.</p>\";\n        prevStr.current = str.current;\n        str.current += \" \" + data;\n        setNotifyMessage(str.current);\n        translate();\n      }\n    });\n    socket.current.on(\"delete_back\", (data) => {\n      _count.current = 0;\n      countWord.current--;\n      str.current = prevStr.current;\n      var infoEl = document.getElementById(\"result\");\n      infoEl.value = data + \"\\n\" + str.current;\n      translate();\n    });\n\n    socket.current.on(\"result\", (data) => {\n      countWord.current++;\n      // clearTimeout(timer);\n      str.current = \"\";\n      setNotifyMessage(data)\n      countWord.current = 0;\n    });\n\n    context.current = canvas.current.getContext(\"2d\");\n\n    setUiSize();\n\n    startTranslate();\n    window.addEventListener(\"resize\", browserResizeHandler);\n    return () => {\n      window.removeEventListener(\"resize\", browserResizeHandler);\n      socket.current.disconnect();\n      clearInterval(interval);\n      clearInterval(detectionInterval);\n    };\n  }, []);\n\n  //시작하기 버튼\n  function startVideo(event) {\n    if (event) event.preventDefault();\n    navigator.mediaDevices\n      .getUserMedia({ video: true })\n      .then(function (stream) {\n        video.current.srcObject = stream;\n        video.current.play();\n        setNotifyMessage(RELOCATION_MESSAGE);\n      })\n      .catch(function (error) {});\n  }\n\n  let initedCanvas;\n  //번역 시작하기\n  function startTranslate(event) {\n    if (event) event.preventDefault();\n    if (flag.current === 0) {\n      flag.current = 1;\n      Promise.all([\n        faceapi.nets.tinyFaceDetector.loadFromUri(FACE_API_MODEL_LOCATION),\n        faceapi.nets.faceLandmark68Net.loadFromUri(FACE_API_MODEL_LOCATION),\n        faceapi.nets.faceRecognitionNet.loadFromUri(FACE_API_MODEL_LOCATION),\n        faceapi.nets.faceExpressionNet.loadFromUri(FACE_API_MODEL_LOCATION),\n        faceapi.nets.ssdMobilenetv1.loadFromUri(FACE_API_MODEL_LOCATION),\n      ]).then(() => {\n        startVideo(event);\n      });\n\n      video.current.addEventListener(\"play\", () => {\n        // canvas를 초기화 함\n        initedCanvas = faceapi.createCanvas(video.current);\n        faceapi.matchDimensions(initedCanvas, displaySize());\n        // 100ms 마다 화면에 video frame이 표시 됨\n        interval.current = setInterval(startDetect, 1000 / 30);\n      });\n    } else {\n      setNotifyMessage(START_MESSAGE);\n      translate();\n    }\n  }\n\n  // video에서 얼굴을 식별\n  async function startDetect() {\n    const detections = await faceapi\n      .detectAllFaces(video.current)\n      .withFaceLandmarks()\n      .withFaceDescriptors();\n    const resizedDetections = faceapi.resizeResults(detections, displaySize());\n    initedCanvas\n      .getContext(\"2d\")\n      .clearRect(0, 0, initedCanvas.width, initedCanvas.height);\n    // video에서 얼굴 좌표에 box를 그림\n    resizedDetections.forEach((detection) => {\n      const box = detection.detection.box;\n      const drawBox = new faceapi.draw.DrawBox(box, { label: \"Face\" });\n      drawBox.draw(initedCanvas);\n      // box의 좌표 값과 너비, 길이를 콘솔창에 출력\n      // console.log(box.x, box.y, box.width, box.height)\n      // console.log(box.x, box.y);\n\n      const boxes = faceBoxes.current;\n      let outerBoxWidth = parseInt(\n        boxes[0].style.width.substring(0, boxes[0].style.width.length - 2)\n      );\n      let outerBoxLeft = parseInt(\n        boxes[0].style.left.substring(0, boxes[0].style.left.length - 2)\n      );\n\n      // if (box.x > outerBoxLeft && box.x < outerBoxLeft + outerBoxWidth) {\n      //   if (box.y > 30 && box.y < 30 + outerBoxWidth) {\n      //     setNotifyMessage(CORRECT_LOCATION_MESSAGE);\n      //     changeColor();\n      //     return;\n      //   }\n      // }\n\n      clearInterval(interval.current);\n      translate();\n    });\n  }\n\n  // function changeColor() {\n  //   const videoOffsetWidth = video.current.offsetWidth;\n  //   const boxes = faceBoxes.current;\n  //   boxes[0].style = `width: ${parseInt(videoOffsetWidth * 0.16 + 0.5)}px;\n  //   height: ${parseInt(videoOffsetWidth * 0.16 + 0.5)}px;\n  //   left: ${parseInt(\n  //     videoOffsetWidth / 2.0 -\n  //       (videoOffsetWidth * 0.08 > 65 ? 65 : videoOffsetWidth * 0.08) +\n  //       0.5\n  //   )}px; border-color : red;`;\n  //   let outerBoxWidth = boxes[0].style.width;\n  //   let outerBoxLeft = boxes[0].style.left;\n  //   boxes[1].style = `width: ${\n  //     parseInt(outerBoxWidth.substring(0, outerBoxWidth.length - 2)) - 10\n  //   }px;border-color : red;\n  //   height: ${\n  //     parseInt(outerBoxWidth.substring(0, outerBoxWidth.length - 2)) - 10\n  //   }px;\n  //   left: ${\n  //     parseInt(outerBoxLeft.substring(0, outerBoxLeft.length - 2)) + 5\n  //   }px;`;\n  //   clearInterval(interval.current);\n  //   translate();\n  // }\n\n  function translate() {\n    _count.current = 0;\n    setCount(_count.current);\n    manageDetection();\n  }\n\n  const manageDetection = () => {\n    if (!detectionInterval) {\n      console.log(\"detectionInterval\");\n      detectionInterval = setInterval(manageDetection, 300);\n    }\n    // if (countWord.current === 5) {\n    //   clearInterval(detectionInterval);\n    //   return;\n    // } else {\n    sendWebCamImage();\n    // }\n  };\n\n  function sendWebCamImage() {\n    const width = video.current.width;\n    const height = video.current.height;\n    const image = video.current;\n    context.current.drawImage(image, 0, 0, width, height);\n    // var data = canvas.current.toDataURL(\"image/jpeg\", 0.5);\n    const data = resizeImage(image);\n    context.current.clearRect(0, 0, width, height);\n    // if (_count.current > 30) {\n    // _count.current = 0;\n    socket.current.emit(\"image\", data); //image 이벤트가 발생하면 data를 서버에 송신 data를 받기 위해 서버에서는 image 이벤트리스트를 만들놔야함\n    // }\n    _count.current++;\n    setCount(_count.current);\n  }\n\n  function removeWord(event) {\n    event.preventDefault();\n    socket.current.emit(\"image\", \"delete\");\n    clearInterval(detectionInterval);\n  }\n\n  const resizeImage = (image) => {\n    const resizeCanvas = document.createElement(\"canvas\");\n    resizeCanvas.width = VIDEO_WIDTH;\n    resizeCanvas.height = VIDEO_HEIGHT;\n    resizeCanvas\n      .getContext(\"2d\")\n      .drawImage(image, 0, 0, resizeCanvas.width, resizeCanvas.height);\n    //canvas의 dataurl를 blob(file)화 하는 과정\n    var dataURI = resizeCanvas.toDataURL(\"image/jpeg\", 0.5); //png => jpg 등으로 변환 가능\n    return dataURI;\n  };\n\n  const onSpeechRecognitotionHandler = (words) => {\n    urls.current.push(...words);\n    console.log(urls.current);\n    if (urls.current.length > 0) {\n      setVideoSrc(`${BASE_VIDEO_URL + urls.current.shift()}.mp4`);\n      // setVideoSrc(`${BASE_VIDEO_URL}너.mp4`);\n      animationVideo.current.playing = true;\n    }\n  };\n\n  const onVideoEndedHandler = (event) => {\n    if (event) event.preventDefault();\n    console.log(`videoEnded, next Play ${urls.current}`);\n    if (urls.current.length > 0) {\n      setVideoSrc(`${BASE_VIDEO_URL + urls.current.shift()}.mp4`);\n      animationVideo.current.playing = true;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <meta charSet=\"UTF-8\" />\n      <title>Document</title>\n      <div className={styles.ex_layout}>\n        <div className=\"gnb\">\n          수어 번역기\n          <div className=\"item last\">\n            {/* <input\n              type=\"button\"\n              onClick={startVideo}\n              className=\"startButton\"\n              value=\"시작하기\"\n            /> */}\n            <input\n              type=\"button\"\n              onClick={removeWord}\n              className=\"deleteButton\"\n              value=\"단어삭제\"\n            />\n            {/* <input\n              type=\"button\"\n              onClick={startTranslate}\n              className=\"translateButton\"\n              value=\"변역하기\"\n            /> */}\n            <SpeechRecognitor\n              onSpeech={onSpeechRecognitotionHandler}\n              BASE_URL={BASE_URL}\n            />\n          </div>\n        </div>\n        <div className=\"main\">\n          <div id={styles.container}>\n            <video\n              className={styles.video}\n              playsInline=\"\"\n              width={VIDEO_WIDTH}\n              id=\"videoElement\"\n              ref={video}\n            />\n            <ReactPlayer\n              className={styles.video}\n              playing={true} // 자동 재생 on\n              muted={true} // 자동 재생 on\n              controls={false} // 플레이어 컨트롤 노출 여부\n              onEnded={() => onVideoEndedHandler()}\n              url={vidoeSrc}\n              ref={animationVideo}\n            />\n            <canvas id=\"canvas\" width=\"0\" ref={canvas} />\n            <div id=\"jb-text\" ref={jb} />\n            {/* <div id={styles.count_box}>\n              <p\n                id=\"frame-count\"\n                style={{ marginLeft: 80, fontSize: 23, color: \"red\" }}\n              >\n                {count}\n              </p>\n            </div> */}\n            <div\n              className={styles.outline}\n              id=\"boxes\"\n              ref={(el) => (faceBoxes.current[0] = el)}\n            />\n            <div\n              className={styles.inner}\n              id=\"boxes\"\n              ref={(el) => (faceBoxes.current[1] = el)}\n            />\n          </div>\n        </div>\n        <div className=\"footer\">\n          <textarea id=\"result\" defaultValue={notifyMessage} />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default AITranslate;\n","import React from 'react';\n// 6. useSelector import를 해주기\nimport { useSelector, useDispatch } from 'react-redux';\nimport { login, logout } from '../redux/user';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Profile() {\n    // 7. user reducer에 있는 state에 접근\n    const user = useSelector((state) => state.user.value);\n    console.log(user);\n\n    // navigate 함수\n    const navigate = useNavigate();\n\n    const dispatch = useDispatch();\n\n    // 로그아웃\n    function userLogout() {\n        // 로그아웃 시 회원 정보 초기화\n        dispatch(logout())\n        // login 페이지로 이동\n        navigate(\"/login\");\n    }\n\n    return (\n        <div>\n            <button onClick={userLogout}>로그아웃</button>\n            <h1>Profile Page</h1>\n            <p> id : {user.userId.id}</p>\n            <p> pass : {user.userPass.pass}</p>\n            <p> name : {user.userName.username} </p>\n            <p> email : {user.userEmail.useremail} </p>\n            <p> isActive : {user.userIsActive.userisactive} </p>\n        </div>\n    );\n}\n\nexport default Profile;","import './App.css';\n // eslint-disable-next-line\n //.\nimport React from \"react\";\n// import React, { Component } from \"react\";\n // eslint-disable-next-line\nimport { BrowserRouter, Routes, Route} from 'react-router-dom';\n// import { BrowserRouter, Routes, Route, Switch } from 'react-router-dom';\nimport LoginPage from \"./pages/LoginPage/LoginPage\";\nimport FindIdPage from \"./pages/IdPassPage/FindIdPage\";\nimport FindPassPage from './pages/IdPassPage/FindPassPage';\n// import MyPage from './pages/MyPage/MyPage';\nimport MainPage from './pages/MainPage/MainPage'\nimport VideoRoomComponent from './components/VideoRoomComponent'\nimport AITranslate from './pages/AITranslate/AITranslate';\nimport WaitTemporary from './pages/WaitTemporary/WaitTemporary'\nimport Profile from './pages/Profile'\n\nfunction App() {\n//   const isLogin = false;\n  \n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<MainPage />}></Route>\n          <Route path=\"/login\" element={<LoginPage />}></Route>\n          <Route path=\"/profile\" element={<Profile />}></Route>\n          <Route path=\"/findId\" element={<FindIdPage />}></Route>\n          <Route path=\"/findPass\" element={<FindPassPage />}></Route>\n          <Route path=\"/cam\" exact element ={<VideoRoomComponent/>}></Route>\n          <Route path=\"/temporary\" exact element={<WaitTemporary/>}></Route>\n          <Route path=\"/aiTranslate\" element ={<AITranslate/>}></Route>\n        </Routes>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n// 1. npm install redux react-redux @reduxjs/toolkit 설치\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './user';\n// npm install redux-persist 설치 및 아래 라이브러리 import\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\nimport { combineReducers } from 'redux';\n\nimport { userSlice } from './user';\n\nconst reducers = combineReducers({\n    user: userSlice.reducer,\n});\n\nconst persistConfig = {\n    key: 'root',\n    storage, // 로컬스토리지 사용\n    whitelist: ['user']\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\n// store에서 모든 state 상태값을 저장\n// 2. configureStore에서 모든 state를 관리\nconst store = configureStore({\n    // reducer에 상태관리할 state를 저장\n    //5. user 리듀서를 스토어에 저장\n    // reducer: {\n    //     user: userReducer,\n    //     reducer: persistedReducer\n    // },\n    reducer: persistedReducer\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistStore } from 'redux-persist';\n\n\n// import VideoRoomComponent from './components/VideoRoomComponent';\n// import registerServiceWorker from './registerServiceWorker';\n\nexport let persistor = persistStore(store);\n\nReactDOM.render(\n    <React.StrictMode>\n    {/* Provider : store가 리액트 앱 전체를 감싸주는 용도 */}\n    <Provider store={store}>\n      {/* loading : store를 불러오는 과정 중에 보여줄 컴포넌트 */}\n      {/* persistor : 로컬스토리지에 저장할 스토어 */}\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>\n  , document.getElementById('root')\n);\n// registerServiceWorker();\n\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     {/* Provider : store가 리액트 앱 전체를 감싸주는 용도 */}\n//     <Provider store={store}>\n//       {/* loading : store를 불러오는 과정 중에 보여줄 컴포넌트 */}\n//       {/* persistor : 로컬스토리지에 저장할 스토어 */}\n//       <PersistGate loading={null} persistor={persistor}>\n//         <App />\n//       </PersistGate>\n//     </Provider>\n//   </React.StrictMode>\n// );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ex_layout\":\"AITranslate_ex_layout__2LH-_\",\"main\":\"AITranslate_main__1xfrI\",\"container\":\"AITranslate_container__1ph3D\",\"outline\":\"AITranslate_outline__3sgyH\",\"inner\":\"AITranslate_inner__9mRqv\",\"video\":\"AITranslate_video__1bHs9\",\"count_box\":\"AITranslate_count_box__2FLsh\"};"],"sourceRoot":""}